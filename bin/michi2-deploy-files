#!/bin/bash
#
# 20220829: now not overwriting filter.list
# 

# 
# readlink for Mac (because Mac readlink does not accept "-f" option)
# 
if [[ $(uname) == *"Darwin"* ]]; then
    function readlink() {
        if [[ $# -gt 1 ]]; then if [[ "$1" == "-f" ]]; then shift; fi; fi
        DIR="$1"; if [[ "$DIR" != *"/"* ]]; then DIR="./$DIR"; fi # 20170228: fixed bug: path without "/"
        DIR=$(echo "${DIR%/*}") # 20160410: fixed bug: source SETUP just under the Softwares dir
        if [[ -d "$DIR" ]]; then cd "$DIR" && echo "$(pwd -P)/$(basename ${1})"; 
        else echo "$(pwd -P)/$(basename ${1})"; fi
    }
fi



# 
# Main program
# 
deploy_current_dir=$(pwd)
deploy_script_dir=$(readlink -f $(dirname "${BASH_SOURCE[0]}"))
deploy_upper_dir=$(readlink -f $(dirname "${deploy_script_dir}"))

#echo "Welcome"


# 
# Check user input
# 
if [[ $# -le 0 ]]; then
    echo "Usage for SED fitting: "
    echo "    michi2-deploy-files SED"
    echo "    michi2-deploy-files SED # will deploy BC03 ConstSFH MultiAge stellar, Mullaney AGN, DL07 dust and radio SED libraries"
    echo "    michi2-deploy-files SED BC03.200Myr DL07UPD2010 # will deploy only the BC03 ConstSFH MultiAge stellar SED library"
    echo "    michi2-deploy-files SED BC03 no AGN no dust no radio # will deploy only the BC03 ConstSFH MultiAge stellar SED library"
    echo "    michi2-deploy-files SED FSPS no AGN no dust no radio # will deploy only the FSPS tau=1Gyr SFH MultiAge stellar SED library"
    echo ""
    echo "Usage for LVG fitting: "
    echo "    michi2-deploy-files LVG # TBD"
    echo ""
fi


echo "Deploying michi2 into ${deploy_current_dir} ..."
#sleep 0.25

# 
# Type of fitting
# 
deploy_type="SED"
if [[ $# -ge 1 ]]; then
    deploy_type="$1"
fi

# 
# Function
# 
function check_input_contains() {
    if [[ $# -ge 2 ]]; then
        k=$#
        last_arg=$(echo "${!k}" | tr -s ' ' | tr '[:upper:]' '[:lower:]')
        j=$(($#-1))
        if [[ x"${last_arg}" != x"" ]]; then
            check_ok=0
            for (( i = 1; i <= $j; i++ )); do
                input_arg=$(echo "${!i}" | tr -s ' ' | tr '[:upper:]' '[:lower:]')
                #echo "${last_arg}" "${input_arg}"
                if [[ $(echo "${last_arg}" | perl -p -e "s/.*\b(${input_arg})\b.*/\1/g") != "${input_arg}" ]]; then
                    # the last arg does not match the whole word of current input arg
                    check_ok=$((check_ok+1))
                fi
            done
            if [[ $check_ok -eq 0 ]]; then
                #echo "yes"
                return 0
            else
                #echo "no"
                return $check_ok
            fi
        fi
    fi
    #echo "no"
    return 255
}

function check_and_unzip() {
    if [[ $# -ge 2 ]]; then
        unzip_type="$1"
        unzip_name=$(basename "$2" | perl -p -e 's/\.zip$//g')
        unzip_log="${unzip_name}.unzip.$(date +%s).log"
        unzip_file="${deploy_upper_dir}/data/lib_SED/$2"
        if [[ ! -f "$unzip_file" ]]; then
            echo "Error! File not found: \"$unzip_file\". Please make sure you have downloaded this code completely."
            exit 255
        fi
        # remove existing lines?
        #if grep -q "^$unzip_type : " libs.list; then
        #    cat libs.list | grep -v "^$unzip_type : " > libs.list.2
        #    cat libs.list.2 > libs.list
        #    if [[ -f libs.list.2 ]]; then
        #        rm libs.list.2
        #    fi
        #fi
        echo "Extracting library file $unzip_file"
        unzip -o "$unzip_file" > "${unzip_log}"
        list_names=($(cat "${unzip_log}" | grep "inflating:" | perl -p -e "s/ *inflating: *//g"))
        echo "$unzip_type : ${unzip_name}.zip : ${list_names[@]}" >> libs.list
        if [[ -f "${unzip_log}" ]]; then
            rm "${unzip_log}"
        fi
    fi
}

#if (check_input_contains "400Myr" "$*") || (check_input_contains "Age400Myr" "$*"); then
#    echo "yes"
#else
#    echo "no"
#fi
#exit


# 
# Deleting all libraries
# 
if [[ -f libs.list ]]; then
    mv libs.list libs.list.backup
fi

# 
# Copy files
# 
if echo "$deploy_type" | grep -q -i "SED"; then
    #cp "${deploy_upper_dir}/data/deploy_michi2"/*.sm "${deploy_upper_dir}/data/deploy_michi2"/run*.sh .
    #cp "${deploy_upper_dir}/data/deploy_SED"/run*.sh .
    #cp "${deploy_upper_dir}/data/deploy_SED"/run*.sm .
    #cp "${deploy_upper_dir}/data/deploy_SED"/pChisq.sm .
    #cp "${deploy_upper_dir}/data/deploy_SED"/rShift.sm .
    #cp "${deploy_upper_dir}/data/deploy_SED"/rUmean.sm .
    #cp "${deploy_upper_dir}/data/deploy_SED"/rChisq.sm .
    cp -r "${deploy_upper_dir}/data/deploy_SED"/filters .
    [ ! -f filter.list ] && cp "${deploy_upper_dir}/data/deploy_SED"/filter.list .
    # 
    if (check_input_contains "no star" "$*") || (check_input_contains "no stellar" "$*"); then
        # 
        echo "We will not deploy any stellar SED library according to the user input"
    else
        # 
        if check_input_contains "BC03" "$*"; then
            # 
            if check_input_contains "MultiAge" "$*"; then
                # 
                check_and_unzip Stellar "lib.BC03.Padova1994.BaSeL.Z0.0190.ConstSFH.MultiAge.EBV.SED.zip"
                # 
            elif (check_input_contains "400Myr" "$*") || (check_input_contains "Age400Myr" "$*"); then
                # 
                check_and_unzip Stellar "lib.BC03.Padova1994.BaSeL.Z0.0190.ConstSFH.Age400Myr.EBV.SED.zip"
                # 
            elif (check_input_contains "200Myr" "$*") || (check_input_contains "Age200Myr" "$*"); then
                # 
                check_and_unzip Stellar "lib.BC03.Padova1994.BaSeL.Z0.0190.ConstSFH.Age200Myr.EBV.SED.zip"
                # 
            else
                # 
                check_and_unzip Stellar "lib.BC03.Padova1994.BaSeL.Z0.0190.ConstSFH.MultiAge.EBV.SED.zip" # BC03 default is BC03 constant SFH single age 200Myr
                # 
            fi
        # 
        elif check_input_contains "FSPS" "$*"; then
            # 
            if check_input_contains "SSP" "$*"; then
                # 
                check_and_unzip Stellar "lib.FSPS.SSP.Padova.BaSeL.Z0.0190.EBV.SED.zip"
                # 
            else
                # 
                check_and_unzip Stellar "lib.FSPS.CSP.tau.1Gyr.Padova.BaSeL.Z0.0190.EBV.SED.zip" # FSPS default is composite SFH tau-declining at 1Gyr
                # 
            fi
        # 
        else
            # 
            check_and_unzip Stellar "lib.BC03.Padova1994.BaSeL.Z0.0190.ConstSFH.MultiAge.EBV.SED.zip" # default is BC03 constant SFH multi-age
            # 
        fi
    fi
    # 
    if (check_input_contains "no dust" "$*"); then
        # 
        echo "We will not deploy any dust SED library according to the user input"
    else
        # 
        if check_input_contains "MBB" "$*"; then
            # 
            cp "${deploy_upper_dir}/data/make_lib_SED/02_Make_Lib_SED/ModifiedBlackbody/lib.MBB.SED" .
            # 
        elif check_input_contains "DL07UPD2010FIR40122" "$*"; then
            # 
            check_and_unzip Dust "lib.DL07UPD2010FIR40122.DuoCom.SED.zip"
            # 
        elif check_input_contains "DL07UPD2010" "$*"; then
            # 
            check_and_unzip Dust "lib.DL07UPD2010.DuoCom.SED.zip"
            # 
        elif (check_input_contains "SINGLEPAH" "$*") || (check_input_contains "SINGLE PAH" "$*") || (check_input_contains "SINGLE QPAH" "$*"); then
            # 
            check_and_unzip Dust "lib.DL07.DuoCom.SinglePAH.lib.zip"
            # 
        elif check_input_contains "DL07 " "$*"; then
            # 
            check_and_unzip Dust "lib.DL07.DuoCom.SED.zip"
            # 
        else
            # 
            check_and_unzip Dust "lib.DL07UPD2010.DuoCom.SED.zip" # default
            # 
        fi
    fi
    # 
    if (check_input_contains "no AGN" "$*"); then
        # 
        echo "We will not deploy any AGN SED library according to the user input"
    else
        # 
        if check_input_contains "siebenmorgen" "$*"; then
            # 
            check_and_unzip AGN "lib.SiebenmorgenAGN.Extrapolated.SED.zip"
            # 
        elif (check_input_contains "mullaney" "$*") || (check_input_contains "mullaneyagn" "$*") || (check_input_contains "mullaney2010" "$*"); then
            # 
            check_and_unzip AGN "lib.MullaneyAGN.SED.zip"
            # 
        else
            # 
            check_and_unzip AGN "lib.MullaneyAGN.SED.zip" # default
            # 
        fi
    fi
    # 
    if [[ $(echo "$@" | tr -s ' ' | tr '[:upper:]' '[:lower:]' | perl -p -e 's/.*\b(no radio)\b.*/\1/g') != "no radio" ]]; then
        if [[ $(echo "$@" | tr -s ' ' | tr '[:upper:]' '[:lower:]' | perl -p -e 's/.*\b(radio[\._ ]?varied[\._ ]?slope)\b.*/radiovariedslope/g') == "radiovariedslope" ]]; then
            check_and_unzip Radio "lib.RadioPowerlaw.Varied.Slope.SED.zip"
        elif [[ $(echo "$@" | tr -s ' ' | tr '[:upper:]' '[:lower:]' | perl -p -e 's/.*\b(radio)\b.*/\1/g') == "radio" ]]; then
            check_and_unzip Radio "lib.RadioPowerlaw.Single.SED.zip"
        else
            check_and_unzip Radio "lib.RadioPowerlaw.Single.SED.zip" # default
        fi
    fi
    # 
    if [[ $(echo "$@" | tr -s ' ' | tr '[:upper:]' '[:lower:]' | perl -p -e 's/.*\b(no co)\b.*/\1/g') != "no co" ]]; then
        if [[ $(echo "$@" | tr -s ' ' | tr '[:upper:]' '[:lower:]' | perl -p -e 's/.*\b(co)\b.*/\1/g') == "co" ]]; then
            check_and_unzip Radio "lib.Radio.mm.FIR.lines.SED.zip"
        fi
    fi
    # 
    #echo "#!/bin/bash" > "run_fitting_5_components.sh"
    #echo "#" >> "run_fitting_5_components.sh"
    #echo "$(dirname ${BASH_SOURCE[0]})/michi2-run-fitting-5-components \$@" >> "run_fitting_5_components.sh"
    #chmod +x "run_fitting_5_components.sh"
    # 
    #echo "#!/bin/bash" > "run_plotting_5_components.sh"
    #echo "#" >> "run_plotting_5_components.sh"
    #echo "$(dirname ${BASH_SOURCE[0]})/michi2-plot-results-of-fitting-5-components \$@" >> "run_plotting_5_components.sh"
    #chmod +x "run_plotting_5_components.sh"
    # 

elif echo "$deploy_type" | grep -q -i "LVG"; then
    
    echo "Please copy the corresponding redshift library from: "
    ls -1 ${deploy_upper_dir}/data/lib_LVG/lib_*.lvg
    #cp "${deploy_upper_dir}/data/deploy_LVG"/*.sm "${deploy_upper_dir}/data/deploy_LVG"/run*.sh .
    #cp "${deploy_upper_dir}/data/lib_LVG/"lib_*.lvg .
    

fi
#if [[ $(uname) == "Darwin" ]]; then
#    echo "Mac!"; sleep 1.0
#    #cp "${deploy_upper_dir}/bin/michi2_v03_20160727mac" .
#    #ln -fs "michi2_v03_20160727mac" michi2_v03
#    #cp "${deploy_upper_dir}/bin/michi2_v04_20171002_0621_mac" .
#    #ln -fs "michi2_v04_20171002_0621_mac" michi2_v04
#    #cp "${deploy_upper_dir}/bin/michi2_v04_20180110_mac" .
#    #ln -fs "michi2_v04_20180110_mac" michi2_v04
#    cp "${deploy_upper_dir}/bin/michi2_v04_20180111_mac" .
#    ln -fs "michi2_v04_20180111_mac" michi2_v04
#    chmod +x michi2_v04
#else
#    cp "${deploy_upper_dir}/bin/michi2_v04_20180110_linux_x86_64" .
#    ln -fs "michi2_v04_20180110_linux_x86_64" michi2_v04
#    chmod +x michi2_v04
#fi

#ln -fs "run_plotting_quintuple.sm" "run_plotting.sm"


